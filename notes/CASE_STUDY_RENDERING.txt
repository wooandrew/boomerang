4rv0.1.0-pre.4-alpha Rendering Rework Case Study

INTRODUCTION

    The current rendering scheme utilizes per-object rendering, where every object and/or texture
    is rendered one by one. The current scheme utilizes a very rudimentary rendering technique:
    first, set the color and bind a texture. Then, calculate and pass the transform to the
    appropriate shader as a uniform. Finally, make a draw call. Wash, rinse, repeat.

THE PROBLEM

    This method is horribly inefficient. As one can imagine, a few draw calls per rendering cycle
    does not impact the performance of the software too much. Make it a few thousand, and the
    performance tanks. Clearly, this is not good, when several hundreds (even thousands when zoomed
    out) are drawn every render cycle.

THE SOLUTION

    The solution to the problem is obvious: reduce the number of draw calls made to the GPU. This
    is done through a method called batch rendering, where multiple vertex arrays are combined into
    one massive vertex array, containing vertex data for all objects that are needed to be rendered.
    Combining hundreds or thousands of vertices into one array means that all vertices can be rendered
    by the GPU using only one draw call, thus resulting in significantly reduced frame times.

    The idea behind batch rendering is drawing elements to the screen dynamically. To do so, memory
    to the GPU must be allocated, but not populated. Instead, once the buffer is allocated, the data
    is then subbed into the allotted stack whenever necessary.

PSEUDOCODE

IN RENDERER:

    BIND WHITE TEXTURE TO SLOT 0

    struct Vertex {
        vec3 position
        vec2 texcoord
        vec4 color
        float slot
    }

    const QuadsToDraw = 10000;
    const VertexCount = QuadsToDraw * 4
    const IndexCount = QuadsToDraw * 6

    // Create Vertex Buffer Array
    glCreateVertexArrays(1, &VA)
    glBindVertexArray(VA)

    glCreateBuffers(1, &VB)
    glBindBuffer(GL_ARRAY_BUFFER, VB)
    glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * VertexCount, nullptr, GL_DYNAMIC_DRAW)

    glEnableVertexArrayAttrib(VA, 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, position))

    glEnableVertexArrayAttrib(VA, 1)
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, texcoord))

    glEnableVertexArrayAttrib(VA, 2)
    glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, color))

    glEnableVertexArrayAttrib(VA, 3)
    glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE, sizeof(Vertex), (const void*)offsetof(Vertex, slot))

    int indices[IndexCount];

    // Create Index Buffer Array
    for (int i = 0, offset = 0; i < IndexCount; i += 6, offset += 4) {
        
        indices[i + 0] = 0 + offset;
        indices[i + 1] = 1 + offset;
        indices[i + 2] = 2 + offset;

        indices[i + 3] = 2 + offset;
        indices[i + 4] = 3 + offset;
        indices[i + 5] = 0 + offset;
    }

    glCreateBuffers(1, &IB)
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IB)
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW)

    // Pass Textures to Shader
    int samplers[MaxTextureSlots] = { 0 to MaxTextureSlots - 1 }
    shader->Bind()
    shader->SetInt1v("u_Textures", MaxTextureSlots, samplers)

    // Sub Data
    auto vertices = CreateXQuads(10)

    glBindBuffer(GL_ARRAY_BUFFER, VB)
    glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(vertices), vertices)

    glBindVertexArray(VA)
    glDrawElements(GL_TRIANGLES, NumQuads * 6, GL_UNSIGNED_INT, nullptr)
